---
description: 
globs: 
alwaysApply: true
---
After major update, create a summary of waht you did at @doc folder
## ‚úÖ Progress Status - Updated

### Done so far:
- ‚úÖ **Basic auth** (Clerk integration complete)
- ‚úÖ **Convex basic** (Real-time database setup complete)
- ‚úÖ **Basic AI chat with collaboration via invite** (Multi-user support working)
- ‚úÖ **Syntax Highlighting** (Code formatting implemented) 
- ‚úÖ **AI SDK Integration** (Fixed streaming, eliminated duplicate saves)

- ‚ö†Ô∏è **File upload integration** - basic upload, pdf direct passing to ai working, still need proper passing to vision models.

- ‚úÖ **Message persistence** (Unified Convex + AI SDK system)
- ‚úÖ **Real-time streaming** (Fixed bugs, now stable)

- ‚è≥ **Model selector** (Basic implementation, can be enhanced)
-  ‚úÖ  **Conversation branching** Working - can be enhanced.
-  ‚úÖ **Message branching** - Buggy, not working.
- ‚åõ **Public/private sharing system** Working but needs update on view permission
- ‚úÖ **Conversation Branching** - Alternative responses and conversation forking
- ‚úÖ **Conversation Sharing** - Public/private sharing system
- ‚úÖ **Public profile** - Public/private sharing system

### üîß Recent Technical Fixes (Latest Session):
- **Fixed Duplicate Message Bug**: Eliminated double-saving messages to database
- **Enhanced useChat Hook**: Added file upload support with proper Convex integration  
- **Streamlined Architecture**: Single source of truth for message handling via AI SDK
- **Improved Real-time Experience**: Better streaming integration, removed flickering
- **File Upload Enhancement**: Seamless integration between file uploads and chat system

Random TODO:
- Only conversation creator can delete, even if other participants are part of the chat.?
- File preview not showing on chat ui, alongside its message.
- For users that havent set their own openrouter or other provider keys, use the system key, only access to free models for free users.

### üéØ Next Priority Items - Phase 2

#### üöÄ Core Feature Completion (Current Focus)
1. **Enhanced File Processing** - Complete PDF analysis and direct pass to vision and file models.
2. **AI Image Generation** - Text-to-image capabilities 

#### ‚ö° Stack Advantages Being Leveraged
- **Real-time Everything**: Convex subscriptions for instant updates
- **Premium Animations**: Framer Motion + GSAP for polished interactions  
- **Type Safety**: Convex + TypeScript = fewer bugs, faster development
- **Modern Stack**: Latest Next.js + AI SDK for best performance

## üéØ Project Overview

**Product Name**: R3 chat
**Competition**: T3 Chat Cloneathon
**Target**: Build a standout AI chat application that exceeds baseline requirements
**Judging Criteria**: "Vibes-based" - Focus on user experience, visual appeal, and creative implementation

---

## üî• Core Required Features

4. **Real-time Web Search** - Current information retrieval
### 1. Multi-Model AI Integration
**Feature**: Support for multiple language models and providers
- **User Story**: As a user, I can choose between different AI models (GPT-4, Claude, Gemini, etc.) for different use cases
- **Acceptance Criteria**:
  - Dropdown/selector for model switching
  - Seamless provider switching without conversation loss
  - Clear model identification in UI (model badges/labels)
  - Cost/speed indicators for each model
- **Priority**: Must Have
- **Technical Notes**: Use unified API provider (OpenRouter recommended) for easy multi-model access

### 2. User Authentication & Chat Persistence
**Feature**: Secure user accounts with synchronized chat history
- **User Story**: As a returning user, I can access all my previous conversations across devices
- **Acceptance Criteria**:
  - Social login (Google, GitHub) + email/password options
  - Chat history persists across sessions and devices
  - User profile management
  - Conversation organization (folders, favorites)
- **Priority**: Must Have

### 3. File Upload & Processing
**Feature**: Support for image and PDF file uploads with AI analysis
- **User Story**: As a user, I can upload images and PDFs for AI to analyze and discuss
- **Acceptance Criteria**:
  - Drag-and-drop file upload interface
  - Image formats: PNG, JPG, GIF, WebP
  - PDF text extraction and analysis
  - File size limits and validation
  - Visual file preview in chat
- **Priority**: Must Have
- **Enhancement Ideas**: OCR for images, multiple file uploads, file management

### 4. AI Image Generation
**Feature**: Generate images from text prompts within chat
- **User Story**: As a user, I can request AI to create images based on my descriptions
- **Acceptance Criteria**:
  - Text-to-image generation (DALL-E, Midjourney, Stable Diffusion)
  - Image style/quality options
  - Generated images save to chat history
  - Share/download generated images
- **Priority**: Must Have
- **Enhancement Ideas**: Image editing, style transfer, image variations

### 5. Code Formatting & Highlighting
**Feature**: Beautiful syntax highlighting for code blocks
- **User Story**: As a developer, I need properly formatted code that's easy to read
- **Acceptance Criteria**:
  - Automatic language detection
  - Copy code button
  - Line numbers
  - Multiple theme options (dark/light)
  - Support for 20+ programming languages
- **Priority**: Must Have

### 6. Conversation Continuity
**Feature**: Resume conversations after page refresh or browser restart
- **User Story**: As a user, I don't lose my conversation progress when I refresh the page
- **Acceptance Criteria**:
  - Auto-save conversation state
  - Restore scroll position
  - Maintain context window
  - Resume interrupted AI responses
- **Priority**: Must Have

### 7. Branching Conversation and ai message response
**Feature**: 
- Branch conversations to explore different responses
- Brnach ai response (single message).
- **User Story**: As a user, I can explore different AI responses without losing my original conversation


- **Acceptance Criteria**:
    - Branching conversation:
        - [ChatBubbleAction.tsx](mdc:src/components/actions/ChatBubbleAction.tsx) Using the branch button.
        - The user can branch out to a new conversation with the history of all previous message from the point it was branched otu only, leaving behind messages below the point of branching.
        - The new branched conversation, which is a entirely new conversation, on the [ConversationList.tsx](mdc:src/components/chat/ConversationList.tsx) will have a branche icon, that when hovered shows when conversation it was branched from, and when clicked, goes to that branch.

    - Brnach ai response (single message).
        - Message in conversation branching, alternative response.
        - using [ChatBubbleAction.tsx](mdc:src/components/actions/ChatBubbleAction.tsx) retry, we show them two options; retry and retry alternative. 
        - **retry** resends the previous message + the initial response + a system prompt that asks the ai to rethink the initial response and provide a better and improved answer.
        - **Retry alternative**: This follows the same steps as retry but instead of replacing the initial message with the new response, it create an alternative version of the inital response. On the response, we will now show a branch pagination to go from one to the other, like a slider, back and forth. on desktop, we can show the both options side by side.
- **Priority**: Must Have
- **Enhancement Ideas**: Visual conversation tree, branch comparison

### 8. Conversation Sharing
**Feature**: Share conversations publicly or with specific users
- **User Story**: As a user, I can share interesting conversations with others
- **Acceptance Criteria**:
  - Generate shareable links
  - Privacy controls (public/private/password-protected)
  - Read-only shared view
  - Export options (PDF, markdown)
- **Priority**: Must Have

### 9. Real-time Web Search
**Feature**: AI can search the web for current information
- **User Story**: As a user, I can ask AI about current events and recent information
- **Acceptance Criteria**:
  - Integration with search APIs (Google, Bing, or Tavily)
  - Search results embedded in responses
  - Source citations and links
  - Real-time information disclaimer
- **Priority**: Must Have
---

## üöÄ Creative Differentiator Features

### 10. Smart Chat Organization
**Feature**: AI-powered conversation categorization and search
- **User Story**: As a power user with many chats, I can quickly find and organize my conversations
- **Acceptance Criteria**:
  - Auto-generated chat titles
  - Tag-based organization
  - Semantic search across all conversations
  - Smart folders (auto-categorization)
- **Priority**: Should Have
- **Differentiator**: Solves real user pain point

### 11. Collaborative Chat Rooms
**Feature**: Multiple users in shared AI conversations
- **User Story**: As a team member, I can collaborate with colleagues in shared AI chats
- **Acceptance Criteria**:
  - Real-time multi-user chat
  - User presence indicators
  - Role-based permissions (admin/member)
  - Shareable room invite links
- **Priority**: Could Have
- **Differentiator**: High wow-factor, technically impressive

### 12. AI Personality System
**Feature**: Switchable AI personas for different use cases
- **User Story**: As a user, I can switch between different AI personalities optimized for specific tasks
- **Acceptance Criteria**:
  - Pre-built personas (Coder, Writer, Tutor, etc.)
  - Custom persona creation
  - Visual persona indicators
  - Context-aware persona suggestions
- **Priority**: Should Have
- **Differentiator**: Unique and practical

### 13. Voice Integration
**Feature**: Speech-to-text input and text-to-speech output
- **User Story**: As a mobile user, I can have voice conversations with AI
- **Acceptance Criteria**:
  - Voice input with real-time transcription
  - Natural TTS for AI responses
  - Multiple voice options
  - Background noise handling
- **Priority**: Could Have
- **Differentiator**: Great for accessibility and mobile experience

### 14. Advanced Context Management
**Feature**: Smart conversation summarization and context optimization
- **User Story**: As a user with long conversations, I don't lose important context due to token limits
- **Acceptance Criteria**:
  - Automatic conversation summarization
  - Important context preservation
  - Context window optimization
  - Reference to previous conversations
- **Priority**: Should Have
- **Differentiator**: Solves AI limitation elegantly

---

## üé® User Experience Requirements

### Design Principles
- **Modern & Clean**: Contemporary UI with thoughtful spacing and typography
- **Responsive**: Flawless mobile experience
- **Fast**: <200ms interaction response times
- **Accessible**: WCAG 2.1 AA compliance
- **Intuitive**: Zero learning curve for basic functionality

### Visual Requirements
- **Dark/Light Theme**: System preference detection + manual toggle
- **Smooth Animations**: Micro-interactions and loading states
- **Visual Hierarchy**: Clear information architecture
- **Mobile-First**: Touch-friendly interface design

### Performance Requirements
- **Initial Load**: <3 seconds on 3G connection
- **Message Send**: <100ms response time
- **File Upload**: Progress indicators for >5MB files
- **Offline Support**: Basic chat viewing when offline

---

## üèÜ Success Metrics

### Competition Goals
1. **Top 3 Placement**: Stand out through unique features and polished execution
2. **Technical Excellence**: Clean, well-documented codebase
3. **User Experience**: Intuitive, delightful interface
4. **Innovation**: Creative solutions to real problems

### Key Differentiators
1. **Unique Feature Implementation**: Choose 2-3 creative features that solve real problems
2. **Superior UX**: Focus on details that make the experience feel premium
3. **Performance**: Noticeably faster and smoother than competitors
4. **Visual Appeal**: Beautiful design that impresses judges
