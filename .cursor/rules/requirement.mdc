---
description: 
globs: 
alwaysApply: true
---

Done so far:
- Basic auth
- Convex basic
- Basic ai chat with collboration via invite.
- Syntax Highlighting
- file upload - partially done, paused for now.
- streaming but stull bugging, on hold

## üéØ Project Overview

**Product Name**: [Your Chat App Name]
**Competition**: T3 Chat Cloneathon
**Target**: Build a standout AI chat application that exceeds baseline requirements
**Judging Criteria**: "Vibes-based" - Focus on user experience, visual appeal, and creative implementation

---

## üî• Core Required Features

### 1. Multi-Model AI Integration
**Feature**: Support for multiple language models and providers
- **User Story**: As a user, I can choose between different AI models (GPT-4, Claude, Gemini, etc.) for different use cases
- **Acceptance Criteria**:
  - Dropdown/selector for model switching
  - Seamless provider switching without conversation loss
  - Clear model identification in UI (model badges/labels)
  - Cost/speed indicators for each model
- **Priority**: Must Have
- **Technical Notes**: Use unified API provider (OpenRouter recommended) for easy multi-model access

### 2. User Authentication & Chat Persistence
**Feature**: Secure user accounts with synchronized chat history
- **User Story**: As a returning user, I can access all my previous conversations across devices
- **Acceptance Criteria**:
  - Social login (Google, GitHub) + email/password options
  - Chat history persists across sessions and devices
  - User profile management
  - Conversation organization (folders, favorites)
- **Priority**: Must Have

### 3. File Upload & Processing
**Feature**: Support for image and PDF file uploads with AI analysis
- **User Story**: As a user, I can upload images and PDFs for AI to analyze and discuss
- **Acceptance Criteria**:
  - Drag-and-drop file upload interface
  - Image formats: PNG, JPG, GIF, WebP
  - PDF text extraction and analysis
  - File size limits and validation
  - Visual file preview in chat
- **Priority**: Must Have
- **Enhancement Ideas**: OCR for images, multiple file uploads, file management

### 4. AI Image Generation
**Feature**: Generate images from text prompts within chat
- **User Story**: As a user, I can request AI to create images based on my descriptions
- **Acceptance Criteria**:
  - Text-to-image generation (DALL-E, Midjourney, Stable Diffusion)
  - Image style/quality options
  - Generated images save to chat history
  - Share/download generated images
- **Priority**: Must Have
- **Enhancement Ideas**: Image editing, style transfer, image variations

### 5. Code Formatting & Highlighting
**Feature**: Beautiful syntax highlighting for code blocks
- **User Story**: As a developer, I need properly formatted code that's easy to read
- **Acceptance Criteria**:
  - Automatic language detection
  - Copy code button
  - Line numbers
  - Multiple theme options (dark/light)
  - Support for 20+ programming languages
- **Priority**: Must Have

### 6. Conversation Continuity
**Feature**: Resume conversations after page refresh or browser restart
- **User Story**: As a user, I don't lose my conversation progress when I refresh the page
- **Acceptance Criteria**:
  - Auto-save conversation state
  - Restore scroll position
  - Maintain context window
  - Resume interrupted AI responses
- **Priority**: Must Have

### 7. Alternative Conversation Paths
**Feature**: Branch conversations to explore different responses
- **User Story**: As a user, I can explore different AI responses without losing my original conversation
- **Acceptance Criteria**:
  - "Regenerate" button for alternative responses
  - Branch conversation tree visualization
  - Switch between conversation branches
  - Merge branches back to main conversation
- **Priority**: Must Have
- **Enhancement Ideas**: Visual conversation tree, branch comparison

### 8. Conversation Sharing
**Feature**: Share conversations publicly or with specific users
- **User Story**: As a user, I can share interesting conversations with others
- **Acceptance Criteria**:
  - Generate shareable links
  - Privacy controls (public/private/password-protected)
  - Read-only shared view
  - Export options (PDF, markdown)
- **Priority**: Must Have

### 9. Real-time Web Search
**Feature**: AI can search the web for current information
- **User Story**: As a user, I can ask AI about current events and recent information
- **Acceptance Criteria**:
  - Integration with search APIs (Google, Bing, or Tavily)
  - Search results embedded in responses
  - Source citations and links
  - Real-time information disclaimer
- **Priority**: Must Have
---

## üöÄ Creative Differentiator Features

### 10. Smart Chat Organization
**Feature**: AI-powered conversation categorization and search
- **User Story**: As a power user with many chats, I can quickly find and organize my conversations
- **Acceptance Criteria**:
  - Auto-generated chat titles
  - Tag-based organization
  - Semantic search across all conversations
  - Smart folders (auto-categorization)
- **Priority**: Should Have
- **Differentiator**: Solves real user pain point

### 11. Collaborative Chat Rooms
**Feature**: Multiple users in shared AI conversations
- **User Story**: As a team member, I can collaborate with colleagues in shared AI chats
- **Acceptance Criteria**:
  - Real-time multi-user chat
  - User presence indicators
  - Role-based permissions (admin/member)
  - Shareable room invite links
- **Priority**: Could Have
- **Differentiator**: High wow-factor, technically impressive

### 12. AI Personality System
**Feature**: Switchable AI personas for different use cases
- **User Story**: As a user, I can switch between different AI personalities optimized for specific tasks
- **Acceptance Criteria**:
  - Pre-built personas (Coder, Writer, Tutor, etc.)
  - Custom persona creation
  - Visual persona indicators
  - Context-aware persona suggestions
- **Priority**: Should Have
- **Differentiator**: Unique and practical

### 13. Voice Integration
**Feature**: Speech-to-text input and text-to-speech output
- **User Story**: As a mobile user, I can have voice conversations with AI
- **Acceptance Criteria**:
  - Voice input with real-time transcription
  - Natural TTS for AI responses
  - Multiple voice options
  - Background noise handling
- **Priority**: Could Have
- **Differentiator**: Great for accessibility and mobile experience

### 14. Advanced Context Management
**Feature**: Smart conversation summarization and context optimization
- **User Story**: As a user with long conversations, I don't lose important context due to token limits
- **Acceptance Criteria**:
  - Automatic conversation summarization
  - Important context preservation
  - Context window optimization
  - Reference to previous conversations
- **Priority**: Should Have
- **Differentiator**: Solves AI limitation elegantly

---

## üé® User Experience Requirements

### Design Principles
- **Modern & Clean**: Contemporary UI with thoughtful spacing and typography
- **Responsive**: Flawless mobile experience
- **Fast**: <200ms interaction response times
- **Accessible**: WCAG 2.1 AA compliance
- **Intuitive**: Zero learning curve for basic functionality

### Visual Requirements
- **Dark/Light Theme**: System preference detection + manual toggle
- **Smooth Animations**: Micro-interactions and loading states
- **Visual Hierarchy**: Clear information architecture
- **Mobile-First**: Touch-friendly interface design

### Performance Requirements
- **Initial Load**: <3 seconds on 3G connection
- **Message Send**: <100ms response time
- **File Upload**: Progress indicators for >5MB files
- **Offline Support**: Basic chat viewing when offline

---

## üèÜ Success Metrics

### Competition Goals
1. **Top 3 Placement**: Stand out through unique features and polished execution
2. **Technical Excellence**: Clean, well-documented codebase
3. **User Experience**: Intuitive, delightful interface
4. **Innovation**: Creative solutions to real problems

### Key Differentiators
1. **Unique Feature Implementation**: Choose 2-3 creative features that solve real problems
2. **Superior UX**: Focus on details that make the experience feel premium
3. **Performance**: Noticeably faster and smoother than competitors
4. **Visual Appeal**: Beautiful design that impresses judges

---

## üìã Implementation Strategy

### Phase 1: Foundation (Days 1-2)
- Core chat interface
- Authentication system
- Basic AI integration
- Database schema

### Phase 2: Required Features (Days 3-4)
- Multi-model support
- File uploads
- Image generation
- Code highlighting
- Web search

### Phase 3: Differentiation (Days 5-6)
- 2-3 unique creative features
- UI/UX polish
- Performance optimization
- Mobile responsiveness

### Phase 4: Polish (Day 7)
- Bug fixes
- Final testing
- Demo preparation
- Documentation

---

## üéØ Recommended Focus Areas

Based on the "vibes-based" judging criteria, prioritize:

1. **User Experience** (40%): Smooth, intuitive, visually appealing
2. **Unique Features** (30%): 2-3 standout capabilities that solve real problems
3. **Technical Quality** (20%): Clean code, good performance, proper error handling
4. **Visual Polish** (10%): Beautiful design, attention to detail

## üéØ Project Overview

**Product Name**: [Your Chat App Name]
**Competition**: T3 Chat Cloneathon
**Target**: Build a standout AI chat application that exceeds baseline requirements
**Judging Criteria**: "Vibes-based" - Focus on user experience, visual appeal, and creative implementation

---

## üî• Core Required Features

### 1. Multi-Model AI Integration
**Feature**: Support for multiple language models and providers
- **User Story**: As a user, I can choose between different AI models (GPT-4, Claude, Gemini, etc.) for different use cases
- **Acceptance Criteria**:
  - Dropdown/selector for model switching
  - Seamless provider switching without conversation loss
  - Clear model identification in UI (model badges/labels)
  - Cost/speed indicators for each model
- **Priority**: Must Have
- **Technical Notes**: Use unified API provider (OpenRouter recommended) for easy multi-model access

### 2. User Authentication & Chat Persistence
**Feature**: Secure user accounts with synchronized chat history
- **User Story**: As a returning user, I can access all my previous conversations across devices
- **Acceptance Criteria**:
  - Social login (Google, GitHub) + email/password options
  - Chat history persists across sessions and devices
  - User profile management
  - Conversation organization (folders, favorites)
- **Priority**: Must Have

### 3. File Upload & Processing
**Feature**: Support for image and PDF file uploads with AI analysis
- **User Story**: As a user, I can upload images and PDFs for AI to analyze and discuss
- **Acceptance Criteria**:
  - Drag-and-drop file upload interface
  - Image formats: PNG, JPG, GIF, WebP
  - PDF text extraction and analysis
  - File size limits and validation
  - Visual file preview in chat
- **Priority**: Must Have
- **Enhancement Ideas**: OCR for images, multiple file uploads, file management

### 4. AI Image Generation
**Feature**: Generate images from text prompts within chat
- **User Story**: As a user, I can request AI to create images based on my descriptions
- **Acceptance Criteria**:
  - Text-to-image generation (DALL-E, Midjourney, Stable Diffusion)
  - Image style/quality options
  - Generated images save to chat history
  - Share/download generated images
- **Priority**: Must Have
- **Enhancement Ideas**: Image editing, style transfer, image variations

### 5. Code Formatting & Highlighting
**Feature**: Beautiful syntax highlighting for code blocks
- **User Story**: As a developer, I need properly formatted code that's easy to read
- **Acceptance Criteria**:
  - Automatic language detection
  - Copy code button
  - Line numbers
  - Multiple theme options (dark/light)
  - Support for 20+ programming languages
- **Priority**: Must Have

### 6. Conversation Continuity
**Feature**: Resume conversations after page refresh or browser restart
- **User Story**: As a user, I don't lose my conversation progress when I refresh the page
- **Acceptance Criteria**:
  - Auto-save conversation state
  - Restore scroll position
  - Maintain context window
  - Resume interrupted AI responses
- **Priority**: Must Have

### 7. Alternative Conversation Paths
**Feature**: Branch conversations to explore different responses
- **User Story**: As a user, I can explore different AI responses without losing my original conversation
- **Acceptance Criteria**:
  - "Regenerate" button for alternative responses
  - Branch conversation tree visualization
  - Switch between conversation branches
  - Merge branches back to main conversation
- **Priority**: Must Have
- **Enhancement Ideas**: Visual conversation tree, branch comparison

### 8. Conversation Sharing
**Feature**: Share conversations publicly or with specific users
- **User Story**: As a user, I can share interesting conversations with others
- **Acceptance Criteria**:
  - Generate shareable links
  - Privacy controls (public/private/password-protected)
  - Read-only shared view
  - Export options (PDF, markdown)
- **Priority**: Must Have

### 9. Real-time Web Search
**Feature**: AI can search the web for current information
- **User Story**: As a user, I can ask AI about current events and recent information
- **Acceptance Criteria**:
  - Integration with search APIs (Google, Bing, or Tavily)
  - Search results embedded in responses
  - Source citations and links
  - Real-time information disclaimer
- **Priority**: Must Have
---

## üöÄ Creative Differentiator Features

### 10. Smart Chat Organization
**Feature**: AI-powered conversation categorization and search
- **User Story**: As a power user with many chats, I can quickly find and organize my conversations
- **Acceptance Criteria**:
  - Auto-generated chat titles
  - Tag-based organization
  - Semantic search across all conversations
  - Smart folders (auto-categorization)
- **Priority**: Should Have
- **Differentiator**: Solves real user pain point

### 11. Collaborative Chat Rooms
**Feature**: Multiple users in shared AI conversations
- **User Story**: As a team member, I can collaborate with colleagues in shared AI chats
- **Acceptance Criteria**:
  - Real-time multi-user chat
  - User presence indicators
  - Role-based permissions (admin/member)
  - Shareable room invite links
- **Priority**: Could Have
- **Differentiator**: High wow-factor, technically impressive

### 12. AI Personality System
**Feature**: Switchable AI personas for different use cases
- **User Story**: As a user, I can switch between different AI personalities optimized for specific tasks
- **Acceptance Criteria**:
  - Pre-built personas (Coder, Writer, Tutor, etc.)
  - Custom persona creation
  - Visual persona indicators
  - Context-aware persona suggestions
- **Priority**: Should Have
- **Differentiator**: Unique and practical

### 13. Voice Integration
**Feature**: Speech-to-text input and text-to-speech output
- **User Story**: As a mobile user, I can have voice conversations with AI
- **Acceptance Criteria**:
  - Voice input with real-time transcription
  - Natural TTS for AI responses
  - Multiple voice options
  - Background noise handling
- **Priority**: Could Have
- **Differentiator**: Great for accessibility and mobile experience

### 14. Advanced Context Management
**Feature**: Smart conversation summarization and context optimization
- **User Story**: As a user with long conversations, I don't lose important context due to token limits
- **Acceptance Criteria**:
  - Automatic conversation summarization
  - Important context preservation
  - Context window optimization
  - Reference to previous conversations
- **Priority**: Should Have
- **Differentiator**: Solves AI limitation elegantly

---

## üé® User Experience Requirements

### Design Principles
- **Modern & Clean**: Contemporary UI with thoughtful spacing and typography
- **Responsive**: Flawless mobile experience
- **Fast**: <200ms interaction response times
- **Accessible**: WCAG 2.1 AA compliance
- **Intuitive**: Zero learning curve for basic functionality

### Visual Requirements
- **Dark/Light Theme**: System preference detection + manual toggle
- **Smooth Animations**: Micro-interactions and loading states
- **Visual Hierarchy**: Clear information architecture
- **Mobile-First**: Touch-friendly interface design

### Performance Requirements
- **Initial Load**: <3 seconds on 3G connection
- **Message Send**: <100ms response time
- **File Upload**: Progress indicators for >5MB files
- **Offline Support**: Basic chat viewing when offline

---

## üèÜ Success Metrics

### Competition Goals
1. **Top 3 Placement**: Stand out through unique features and polished execution
2. **Technical Excellence**: Clean, well-documented codebase
3. **User Experience**: Intuitive, delightful interface
4. **Innovation**: Creative solutions to real problems

### Key Differentiators
1. **Unique Feature Implementation**: Choose 2-3 creative features that solve real problems
2. **Superior UX**: Focus on details that make the experience feel premium
3. **Performance**: Noticeably faster and smoother than competitors
4. **Visual Appeal**: Beautiful design that impresses judges

---

## üìã Implementation Strategy

### Phase 1: Foundation (Days 1-2)
- Core chat interface
- Authentication system
- Basic AI integration
- Database schema

### Phase 2: Required Features (Days 3-4)
- Multi-model support
- File uploads
- Image generation
- Code highlighting
- Web search

### Phase 3: Differentiation (Days 5-6)
- 2-3 unique creative features
- UI/UX polish
- Performance optimization
- Mobile responsiveness

### Phase 4: Polish (Day 7)
- Bug fixes
- Final testing
- Demo preparation
- Documentation

---

## üéØ Recommended Focus Areas

Based on the "vibes-based" judging criteria, prioritize:

1. **User Experience** (40%): Smooth, intuitive, visually appealing
2. **Unique Features** (30%): 2-3 standout capabilities that solve real problems
3. **Technical Quality** (20%): Clean code, good performance, proper error handling
4. **Visual Polish** (10%): Beautiful design, attention to detail# R3 Chat - Stack-Aligned Product Requirements

## üèóÔ∏è Technology Stack Analysis

### Current Stack Strengths
- **Next.js 15.3.3**: Perfect for SSR, API routes, and modern React features
- **Clerk**: Excellent authentication solution (social login, user management)
- **Convex**: Real-time database with built-in reactivity and TypeScript support
- **Tailwind CSS v4**: Modern styling with excellent performance
- **Framer Motion + GSAP**: Premium animation capabilities
- **Radix UI**: Accessible, unstyled components for rapid development
- **TypeScript**: Type safety throughout the application

### Stack Advantages for Competition
‚úÖ **Real-time capabilities** (Convex)  
‚úÖ **Premium animations** (Framer Motion + GSAP)  
‚úÖ **Modern UI components** (Radix UI)  
‚úÖ **Excellent DX** (TypeScript + Next.js)  
‚úÖ **Production-ready auth** (Clerk)  

---
## üéØ Revised Feature Prioritization

### Tier 1: Core Features (Leverage Stack Strengths)
These features align perfectly with your current stack:

#### 1. User Authentication & Chat Persistence ‚≠ê
- **Implementation**: Clerk handles auth, Convex handles real-time chat persistence
- **Effort**: Low (stack handles complexity)
- **Impact**: High (essential functionality)

#### 2. Real-time Collaborative Chat Rooms ‚≠ê‚≠ê‚≠ê
- **Implementation**: Convex's real-time subscriptions make this trivial
- **Effort**: Medium (your stack's sweet spot)
- **Impact**: Very High (major differentiator)
- **Why Prioritize**: Most competitors will struggle with real-time; you get it for free

#### 3. Premium UI/UX with Micro-interactions ‚≠ê‚≠ê
- **Implementation**: Framer Motion + GSAP + Radix UI
- **Effort**: Medium (your animation stack is premium)
- **Impact**: High (judges will notice the polish)

#### 4. Multi-Model AI Integration ‚≠ê
- **Implementation**: API routes in Next.js, state management in Convex
- **Effort**: Medium
- **Impact**: High (required feature)

### Tier 2: Differentiator Features (Stack-Enabled)

#### 5. Smart Chat Organization with Real-time Search ‚≠ê‚≠ê
- **Implementation**: Convex's full-text search + real-time updates
- **Effort**: Low-Medium (Convex handles search complexity)
- **Impact**: High (solves real problem)

#### 6. Live Typing Indicators & Presence ‚≠ê‚≠ê
- **Implementation**: Convex presence system
- **Effort**: Low (built into Convex)
- **Impact**: High (feels premium)

#### 7. Advanced Context Management ‚≠ê
- **Implementation**: Convex for conversation history, Next.js API for AI processing
- **Effort**: Medium
- **Impact**: Medium-High

### Tier 3: Standard Features (Required but not differentiating)

#### 8. File Upload & Processing
- **Implementation**: Next.js API routes + external storage
- **Effort**: Medium
- **Impact**: Medium (expected feature)

#### 9. AI Image Generation
- **Implementation**: Next.js API routes to AI services
- **Effort**: Medium
- **Impact**: Medium (expected feature)

#### 10. Code Formatting & Highlighting
- **Implementation**: Client-side syntax highlighting library
- **Effort**: Low
- **Impact**: Low (baseline expectation)

---

## üöÄ Recommended Implementation Strategy

### Phase 1: Foundation (Days 1-2)
Focus on your stack's strengths:

```typescript
// Convex schema design
export const conversations = defineTable({
  title: v.string(),
  participants: v.array(v.string()), // User IDs
  lastMessage: v.optional(v.string()),
  createdAt: v.number(),
  updatedAt: v.number(),
  isCollaborative: v.boolean(),
})

export const messages = defineTable({
  conversationId: v.id("conversations"),
  userId: v.string(),
  content: v.string(),
  aiModel: v.optional(v.string()),
  timestamp: v.number(),
  type: v.union(v.literal("user"), v.literal("ai"), v.literal("system")),
})

export const presence = defineTable({
  userId: v.string(),
  conversationId: v.id("conversations"),
  lastSeen: v.number(),
  isTyping: v.boolean(),
})
```

### Phase 2: Real-time Magic (Days 3-4)
Implement features that showcase your stack:

```typescript
// Real-time collaboration hook
export function useCollaborativeChat(conversationId: Id<"conversations">) {
  const messages = useQuery(api.messages.getByConversation, { conversationId });
  const presence = useQuery(api.presence.getByConversation, { conversationId });
  const sendMessage = useMutation(api.messages.send);
  
  return {
    messages,
    activeUsers: presence?.filter(p => Date.now() - p.lastSeen < 30000),
    typingUsers: presence?.filter(p => p.isTyping),
    sendMessage,
  };
}
```

### Phase 3: Premium Polish (Days 5-6)
Leverage your animation stack:

```typescript
// Premium loading states with Framer Motion
const MessageBubble = ({ message, isAI }) => (
  <motion.div
    initial={{ opacity: 0, y: 20 }}
    animate={{ opacity: 1, y: 0 }}
    transition={{ duration: 0.3, ease: "easeOut" }}
    className={cn(
      "rounded-2xl p-4 max-w-[80%]",
      isAI ? "bg-muted mr-auto" : "bg-primary text-primary-foreground ml-auto"
    )}
  >
    {isAI && <TypingIndicator />}
    {message.content}
  </motion.div>
);
```

---

## üéØ Winning Strategy

### Your Competitive Advantages
1. **Real-time Everything**: While others struggle with WebSockets, you get real-time for free
2. **Premium Animations**: Your GSAP + Framer Motion combo will make the app feel expensive
3. **Type Safety**: Convex + TypeScript = fewer bugs, faster development
4. **Modern Stack**: Latest versions of everything = best performance

### Features to Emphasize
1. **Live Collaborative Chats** (Your killer feature)
2. **Buttery Smooth Animations** (Judges will notice)
3. **Real-time Search & Organization** (Practical magic)
4. **Instant Presence & Typing** (Feels premium)

### What to De-prioritize
- Voice features (complex, not stack-aligned)
- Complex file processing (time-consuming)
- Web scraping (can be flakey)
- Advanced branching UI (complex for limited impact)

---

## üì¶ Additional Dependencies Needed

```json
{
  "dependencies": {
    // AI Integration
    "openai": "^4.x.x",
    "@ai-sdk/openai": "^0.x.x", // or openrouter
    
    // Code Highlighting
    "prismjs": "^1.29.0",
    "react-syntax-highlighter": "^15.x.x",
    
    // File Upload
    "uploadthing": "^6.x.x", // Convex-friendly
    
    // Utilities
    "date-fns": "^2.x.x",
    "react-use": "^17.x.x"
  }
}
```

---

## üèÜ Success Metrics Aligned to Stack

### Technical Excellence (What judges will see)
1. **Instant Real-time Updates**: Messages appear immediately across all users
2. **Smooth Animations**: Every interaction feels polished
3. **Zero Loading States**: Convex's optimistic updates eliminate spinners
4. **Perfect Mobile Experience**: Tailwind + Framer Motion responsive animations

### Unique Value Proposition
**"The only chat app where collaboration feels like magic"**